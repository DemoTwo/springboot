<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--继承springboot的父级依赖-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <!--项目的相关信息-->
    <groupId>com.cjp.springboot</groupId>
    <artifactId>01-springboot-web</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>01-springboot-web</name>
    <description>Demo project for Spring Boot</description>
    <!--属性配置-->
    <properties>
        <!--jdk版本-->
        <java.version>1.8</java.version>
    </properties>
<!--相关的依赖信息-->
    <dependencies>
        <!--springboot开发web项目的起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <!--此依赖不需要写版本号，以为我们上面已经继承了springboot的父级依赖-->
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--测试的起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--引入springboot内嵌Tomcat对jsp的解析包-->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <!--servlet依赖的jar包start-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>
        <!--servlet依赖的jar包end-->

        <!--jsp依赖jar包start-->
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <!--jsp依赖jar包end-->
        <!--jstl标签依赖的jar start-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <!--jstl标签依赖的jar end-->
    </dependencies>
<!--编译-->
    <build>
        <plugins>
            <!--springboot提供的项目打包编译插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <!--<resources>-->
            <!--&lt;!&ndash;默认情况下，编译src/main/java目录下文件的时候只会编译class 文件，现在则表示编译的同时会把所有的-->
            <!--xml文件（**/*.xml）一并拷贝到编译文件夹下面。例如mybatis-->
            <!--&ndash;&gt;-->
            <!--<resource>-->
                <!--<directory>src/main/java</directory>-->
                <!--<includes>-->
                    <!--<include>**/*.xml</include>-->
                <!--</includes>-->
            <!--</resource>-->

            <!--<resource>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<includes>-->
                    <!--<include>**/*.*</include>-->
                <!--</includes>-->
            <!--</resource>-->

            <!--&lt;!&ndash;src/main/webapp下的所以资源（**/*.*）都编译到META-INF/resources目录下面&ndash;&gt;-->
            <!--<resource>-->
                <!--<directory>src/main/webapp</directory>-->
                <!--<targetPath>META-INF/resources</targetPath>-->
                <!--<includes>-->
                    <!--<include>**/*.*</include>-->
                <!--</includes>-->
            <!--</resource>-->
        <!--</resources>-->
    </build>

</project>
